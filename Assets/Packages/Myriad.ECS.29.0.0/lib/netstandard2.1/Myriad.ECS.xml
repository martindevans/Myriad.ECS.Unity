<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Myriad.ECS</name>
    </assembly>
    <members>
        <member name="M:Myriad.ECS.Allocations.ArrayFactory.Prepare``1">
            <summary>
            Prepare this type so that arrays of it can be constructed later
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Allocations.ArrayFactory.Prepare(System.Type)">
            <summary>
            Prepare this type so that arrays of it can be constructed later
            </summary>
        </member>
        <member name="M:Myriad.ECS.Allocations.ArrayFactory.Create(System.Type,System.Int32)">
            <summary>
            Create an array of the given type
            </summary>
            <param name="type"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Allocations.LocalPool`1">
            <summary>
            A non-thread safe pool, backed by the global thread safe pool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Allocations.LocalPool`1.#ctor">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Allocations.LocalPool`1"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Allocations.LocalPool`1.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Allocations.LocalPool`1"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Allocations.LocalPool`1.Get">
            <summary>
            Get al item from this pool, fetches from the global pool if none are available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Allocations.LocalPool`1.Return(`0)">
            <summary>
            Return an item to this pool
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Myriad.ECS.Allocations.LocalPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Allocations.Pool`1">
            <summary>
            Thread safe global pool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool`1.Get">
            <summary>
            Get an item from this pool, creates a new one if there are none in the pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool`1.Rent">
            <summary>
            Get an item from this pool, creates a new one if there are none in the pool
            </summary>
            <returns>A <see cref="T:Myriad.ECS.Allocations.Pool`1.Rental"/> contains the borrowed object and will return it when disposed</returns>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool`1.Return(`0)">
            <summary>
            Return an item to the pool
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Myriad.ECS.Allocations.Pool`1.Rental">
            <summary>
            Contains an object borrowed from a pool, returns it when disposed
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool`1.Rental.#ctor(`0)">
            <summary>
            Contains an object borrowed from a pool, returns it when disposed
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Myriad.ECS.Allocations.Pool`1.Rental.Value">
            <summary>
            The borrowed object
            </summary>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool`1.Rental.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Allocations.Pool">
            <summary>
            Thread safe global pool.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Allocations.Pool.Return``1(``0)">
            <summary>
            Return an item to the pool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
        </member>
        <member name="T:Myriad.ECS.Collections.ComponentBloomFilter">
             <summary>
             Probabalistic set of component IDs. Can be used to check if two sets intersect.<br />
            
             False positives are possible (i.e. If Intersects returns true, then there <b>might</b> be an overlap).<br />
             False negatives are <b>not</b> possible (i.e. If Intersects return false, then there <b>definitely</b> is no overlap).<br />
             </summary>
        </member>
        <member name="T:Myriad.ECS.Collections.FrozenOrderedListSet`1">
            <summary>
            A frozen (i.e. completely immutable) set of objects.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Collections.FrozenOrderedListSet`1.Count">
            <summary>
            Get the number of items in this set
            </summary>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.CopyTo(System.Collections.Generic.List{`0})">
            <summary>
            Copy this set to the given list
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.LINQ">
            <summary>
            Get a collection which can be queried by LINQ (only use this for tests)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.GetEnumerator">
            <summary>
            Get an enumerator over the items in this set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.Contains(`0)">
            <summary>
            Check if this set contains the given item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.IsSupersetOf(Myriad.ECS.Collections.OrderedListSet{`0})">
            <summary>
            Check if this set is a superset of another set. i.e. contains all the items in the other set.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.IsSupersetOf(Myriad.ECS.Collections.FrozenOrderedListSet{`0})">
            <summary>
            Check if this set is a superset of another set. i.e. contains all the items in the other set.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.Overlaps(Myriad.ECS.Collections.OrderedListSet{`0})">
            <summary>
            Check if this set overlaps another set. i.e. contains at least one item which is in the other set.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.Overlaps(Myriad.ECS.Collections.FrozenOrderedListSet{`0})">
            <summary>
            Check if this set overlaps another set. i.e. contains at least one item which is in the other set.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.SetEquals(Myriad.ECS.Collections.OrderedListSet{`0})">
            <summary>
            Check if this set contains exactly the same items as another set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.SetEquals(Myriad.ECS.Collections.FrozenOrderedListSet{`0})">
            <summary>
            Check if this set contains exactly the same items as another set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.FrozenOrderedListSet`1.SetEquals``1(System.Collections.Generic.Dictionary{`0,``0})">
            <summary>
            Check if this set contains exactly the same items as another set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Collections.OrderedListSet`1">
            <summary>
            A set built out of an ordered list. This allows allocation free enumeration of the set.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Collections.OrderedListSet`1.Freeze">
            <summary>
            Copy this set to a new frozen set
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Collections.SegmentedList`1">
            <summary>
            A list which stores data in "segments", this removes the need for copying data when the list grows.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Collections.SegmentedList`1.SegmentCapacity">
            <summary>
            How many items are stored within a single segment
            </summary>
        </member>
        <member name="P:Myriad.ECS.Collections.SegmentedList`1.TotalCapacity">
            <summary>
            Total capacity in all segments
            </summary>
        </member>
        <member name="P:Myriad.ECS.Collections.SegmentedList`1.Item(System.Int32)">
            <summary>
            Get the item with the given index (mutable)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Collections.SegmentedList`1.GetSegment(System.Int32)">
            <summary>
            Get the segment and index within the segment for the item with the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Myriad.ECS.Collections.SegmentedList`1.Grow">
            <summary>
            Add another segment
            </summary>
        </member>
        <member name="T:Myriad.ECS.Command.CommandBuffer">
            <summary>
            Buffers up modifications to entities and replays them all at once.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Command.CommandBuffer.BufferedEntity">
            <summary>
            An entity that has been created in a command buffer, but not yet created. Can be used to add components.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.BufferedEntity.Set``1(``0,Myriad.ECS.Command.CommandBuffer.DuplicateSet)">
            <summary>
            Add a component to this entity
            </summary>
            <typeparam name="T">The type of component to add</typeparam>
            <param name="value">The value of the component to add</param>
            <param name="duplicateMode">Indicates how duplicates sets of this component for this entity in this buffer should be handled</param>
            <returns>this buffered entity</returns>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.BufferedEntity.Set``1(``0,Myriad.ECS.Command.CommandBuffer.BufferedEntity,Myriad.ECS.Command.CommandBuffer.DuplicateSet)">
            <summary>
            Add a relational component to this entity
            </summary>
            <typeparam name="T">The type of component to add</typeparam>
            <param name="value">The value of the component to add</param>
            <param name="relation">When the command buffer is played back the target entity will automatically be resolved and set into the relational component</param>
            <param name="duplicateMode">Indicates how duplicates sets of this component for this entity in this buffer should be handled</param>
            <returns>this buffered entity</returns>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.BufferedEntity.Set``1(``0,Myriad.ECS.Entity,Myriad.ECS.Command.CommandBuffer.DuplicateSet)">
            <summary>
            Add a relational component to this entity
            </summary>
            <typeparam name="T">The type of component to add</typeparam>
            <param name="value">The value of the component to add</param>
            <param name="relation"></param>
            <param name="duplicateMode">Indicates how duplicates sets of this component for this entity in this buffer should be handled</param>
            <returns>this buffered entity</returns>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.BufferedEntity.Resolve">
            <summary>
            Resolve this buffered Entity into the real Entity that was constructed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.World">
            <summary>
            The <see cref="P:Myriad.ECS.Command.CommandBuffer.World"/> this <see cref="T:Myriad.ECS.Command.CommandBuffer"/> is modifying
            </summary>
        </member>
        <member name="F:Myriad.ECS.Command.CommandBuffer._setters">
            <summary>
            Collection of all components to be set onto entities
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Command.CommandBuffer"/> for the given <see cref="P:Myriad.ECS.Command.CommandBuffer.World"/>
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Playback">
            <summary>
            Apply all of the operations in this buffer to the <see cref="P:Myriad.ECS.Command.CommandBuffer.World"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Create">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Entity"/> in the world.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Set``1(Myriad.ECS.Entity,``0)">
            <summary>
            Add or overwrite a component attached to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="value"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Set``1(Myriad.ECS.Entity,``0,Myriad.ECS.Command.CommandBuffer.BufferedEntity)">
            <summary>
            Add or overwrite a component attached to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="value"></param>
            <param name="relation">When this buffer is played back the given buffered entity will be set into the component</param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Set``1(Myriad.ECS.Entity,``0,Myriad.ECS.Entity)">
            <summary>
            Add or overwrite a component attached to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="value"></param>
            <param name="relation"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Remove``1(Myriad.ECS.Entity)">
            <summary>
            Remove a component attached to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Delete(Myriad.ECS.Entity)">
            <summary>
            Delete an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Delete(System.Collections.Generic.List{Myriad.ECS.Entity})">
            <summary>
            Bulk delete entities
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Delete(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Bulk delete all entities which match the given query
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:Myriad.ECS.Command.CommandBuffer.BufferedEntityData">
            <summary>
            Data about a new entity being created
            </summary>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.BufferedEntityData.Id">
            <summary>ID of this buffered entity, used in resolver to get actual entity</summary>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.BufferedEntityData.Setters">
            <summary>All setters to be run on this entity</summary>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.BufferedEntityData.Node">
            <summary>The "Node ID" of this entity, all buffered entities with the same node ID are in the same archetype (except -1)</summary>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.BufferedEntityData.#ctor(System.UInt32,System.Collections.Generic.Dictionary{Myriad.ECS.IDs.ComponentID,Myriad.ECS.Command.ComponentSetterCollection.SetterId})">
            <summary>
            Data about a new entity being created
            </summary>
            <param name="id">ID of this buffered entity, used in resolver to get actual entity</param>
            <param name="setters">All setters to be run on this entity</param>
        </member>
        <member name="T:Myriad.ECS.Command.CommandBuffer.DuplicateSet">
            <summary>
            Indicates how multiple Set operations enqueued for the same entity in this buffer should that be handled
            </summary>
        </member>
        <member name="F:Myriad.ECS.Command.CommandBuffer.DuplicateSet.Overwrite">
            <summary>
            The later set value should overwrite the earlier one.<br />
            <code>Set(A); Set(B);</code>
            Would result in `B`
            </summary>
        </member>
        <member name="F:Myriad.ECS.Command.CommandBuffer.DuplicateSet.Discard">
            <summary>
            The later set value should be discarded.<br />
            <code>Set(A); Set(B);</code>
            Would result in `A`
            </summary>
        </member>
        <member name="F:Myriad.ECS.Command.CommandBuffer.DuplicateSet.Throw">
            <summary>
            The later set value should throw an exception.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Command.CommandBuffer.Resolver">
            <summary>
            Provides a way to resolve created entities. Must be disposed once finished with!
            </summary>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.Resolver.Count">
            <summary>
            Get the number of entities in this <see cref="T:Myriad.ECS.Command.CommandBuffer.Resolver"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.Resolver.World">
            <summary>
            The <see cref="P:Myriad.ECS.Command.CommandBuffer.Resolver.World"/> this resolver is for.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.CommandBuffer.Resolver.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Myriad.ECS.Command.CommandBuffer.Resolver.Item(System.Int32)">
            <summary>
            Get the nth item in this <see cref="T:Myriad.ECS.Command.CommandBuffer.Resolver"/>. Items are an arbitrary order.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Myriad.ECS.Command.ComponentSetterCollection">
            <summary>
            Collection of components of all different types, keyed by ComponentID, involves no boxing
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.ComponentSetterCollection.Dispose(System.Collections.Generic.SortedList{Myriad.ECS.IDs.ComponentID,Myriad.ECS.Command.ComponentSetterCollection.SetterId},Myriad.ECS.Command.LazyCommandBuffer@)">
            <summary>
            Dispose all disposable components specified by the given sorted list
            </summary>
            <param name="sets"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:Myriad.ECS.Command.ComponentSetterCollection.DisposeAllOverwritten(Myriad.ECS.Command.LazyCommandBuffer@)">
            <summary>
            Dispose all disposable components that were not written to an entity
            </summary>
            <param name="lazy"></param>
        </member>
        <member name="F:Myriad.ECS.Command.ComponentSetterCollection.SetterId.ID">
            <summary>
            Component ID of the component being overwritten
            </summary>
        </member>
        <member name="F:Myriad.ECS.Command.ComponentSetterCollection.SetterId.Index">
            <summary>
            Index of the setter in the setters list
            </summary>
        </member>
        <member name="T:Myriad.ECS.Command.LazyCommandBuffer">
            <summary>
            Provides a <see cref="P:Myriad.ECS.Command.LazyCommandBuffer.CommandBuffer"/>, which is lazily created the first time it is accessed
            </summary>
        </member>
        <member name="P:Myriad.ECS.Command.LazyCommandBuffer.World">
            <summary>
            The <see cref="P:Myriad.ECS.Command.LazyCommandBuffer.World"/> which this <see cref="T:Myriad.ECS.Command.LazyCommandBuffer"/> is for
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.LazyCommandBuffer.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Command.LazyCommandBuffer"/> for the given <see cref="P:Myriad.ECS.Command.LazyCommandBuffer.World"/>
            </summary>
            <param name="world"></param>
        </member>
        <member name="P:Myriad.ECS.Command.LazyCommandBuffer.CommandBuffer">
            <summary>
            Get the buffer (constructing one if it does not yet exist)
            </summary>
        </member>
        <member name="M:Myriad.ECS.Command.LazyCommandBuffer.TryGetBuffer(Myriad.ECS.Command.CommandBuffer@)">
            <summary>
            Get the buffer, or null if it does not yet exist
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Components.ComponentArray`1">
            <summary>
            Store an array reference in a component
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentArray`1.Array">
            <summary>
            The array
            </summary>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentArray`1.Length">
            <summary>
            Get the length of the array
            </summary>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentArray`1.Item(System.Int32)">
            <summary>
            Index into the array
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Components.ComponentArray`1.#ctor(`0[])">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Components.ComponentArray`1"/>
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Myriad.ECS.Components.ComponentArray`1.Create(System.Int32,`0)">
            <summary>
            Factory to create a new <see cref="T:Myriad.ECS.Components.ComponentArray`1"/>, filling the array with copies of the same object
            </summary>
            <param name="length"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Components.ComponentList`1">
            <summary>
            Store a list in a component
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentList`1.List">
            <summary>
            The array
            </summary>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentList`1.Count">
            <summary>
            Get the length of the list
            </summary>
        </member>
        <member name="P:Myriad.ECS.Components.ComponentList`1.Item(System.Int32)">
            <summary>
            Index into the array
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Components.ComponentList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Components.ComponentList`1"/>
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Myriad.ECS.Components.ComponentList`1.Create(System.Int32,`0)">
            <summary>
            Factory to create a new <see cref="T:Myriad.ECS.Components.ComponentList`1"/>, filling the list with copies of the same object
            </summary>
            <param name="length"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Components.DebugDisplayName">
            <summary>
            Friendly name to use when displaying this entity for debugging purposes.
            Recommended (but not required) to make this unique!
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Myriad.ECS.Components.DebugDisplayName.#ctor(System.String)">
            <summary>
            Friendly name to use when displaying this entity for debugging purposes.
            Recommended (but not required) to make this unique!
            </summary>
            <param name="Name"></param>
        </member>
        <member name="P:Myriad.ECS.Components.DebugDisplayName.Name">
            <summary></summary>
        </member>
        <member name="T:Myriad.ECS.Components.ChildEntities">
            <summary>
            A list of child entities that will be destroyed when this entity is destroyed
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Myriad.ECS.Components.ChildEntities.#ctor(System.Collections.Generic.List{Myriad.ECS.Entity})">
            <summary>
            A list of child entities that will be destroyed when this entity is destroyed
            </summary>
            <param name="children"></param>
        </member>
        <member name="F:Myriad.ECS.Components.ChildEntities.Children">
            <summary>
            A list of entities that will be destroyed when this component is disposed
            </summary>
        </member>
        <member name="M:Myriad.ECS.Components.ChildEntities.Dispose(Myriad.ECS.Command.LazyCommandBuffer@)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Components.IDisposableComponent">
            <summary>
            Automatically has Dispose() called when this component is destroyed. Either because the Entity
            was destroyed or because the component was removed from the Entity.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Components.IDisposableComponent.Dispose(Myriad.ECS.Command.LazyCommandBuffer@)">
            <summary>
            Dispose this component
            </summary>
            <param name="buffer">May be used to enqueue more work as a result of this disposal</param>
        </member>
        <member name="T:Myriad.ECS.Components.Disposer`1">
            <summary>
            Provides a generic way to dispose _any_ component. Does nothing for non-disposable components.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Myriad.ECS.Components.IPhantomComponent">
            <summary>
            <para>
            A phantom component acts like a normal component until the entity is destroyed. At
            that point instead of being destroyed the entity will automatically have a
            <see cref="T:Myriad.ECS.Components.Phantom"/> component added.
            </para>
            <para>
            If an entity with a <see cref="T:Myriad.ECS.Components.Phantom"/> entity is destroyed, it will
            actually be destroyed. It will also automatically be destroyed if it has no more
            <see cref="T:Myriad.ECS.Components.IPhantomComponent"/> components attached.
            </para>
            </summary>
        </member>
        <member name="T:Myriad.ECS.Components.Phantom">
            <summary>
            <para>
            Indicates that the entity this is attached to is a "phantom". Phantom entities
            are automatically excluded from queries and must be specifically requested.
            </para>
            <para>An entity will automatically become a phantom if it is destroyed, but still has
            <see cref="T:Myriad.ECS.Components.IPhantomComponent"/> components attached.
            </para>
            <para>
            If an entity with a <see cref="T:Myriad.ECS.Components.Phantom"/> component is destroyed, it will
            actually be destroyed. It will automatically be destroyed if it has no more
            <see cref="T:Myriad.ECS.Components.IPhantomComponent"/> components attached.
            </para>
            </summary>
        </member>
        <member name="T:Myriad.ECS.Components.IEntityRelationComponent">
            <summary>
            A relation component can be added to a command buffer, along with an associated buffered entity. When the
            buffered entity is created it will be automatically resolved and added to this component.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Components.IEntityRelationComponent.Target">
            <summary>
            The target entity of this relationship
            </summary>
        </member>
        <member name="T:Myriad.ECS.Components.Extensions">
            <summary>
            Extensions related to sharding
            </summary>
        </member>
        <member name="M:Myriad.ECS.Components.Extensions.AddSharding(Myriad.ECS.Command.CommandBuffer.BufferedEntity,System.Int32)">
            <summary>
            Add a new component based on the index, forcing this entity into a different archetype. If creating many
            entities and they need to be split up for some reason this can shard them.
            </summary>
            <param name="buffered"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Components.Extensions.AddSharding(Myriad.ECS.Command.CommandBuffer,Myriad.ECS.Entity,System.Int32)">
            <summary>
            Add a new component based on the index, forcing this entity into a different archetype. If creating many
            entities and they need to be split up for some reason this can shard them.
            </summary>
            <param name="buffer"></param>
            <param name="entity"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Components.Extensions.RemoveSharding(Myriad.ECS.Command.CommandBuffer,Myriad.ECS.Entity)">
            <summary>
            Remove whatever sharding is attached to this entity
            </summary>
            <param name="buffer"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Myriad.ECS.Entity">
            <summary>
            An <see cref="T:Myriad.ECS.Entity"/> is an ID in the <see cref="F:Myriad.ECS.Entity.World"/> which has a set of components associated with it.
            </summary>
        </member>
        <member name="F:Myriad.ECS.Entity.World">
            <summary>
            The <see cref="F:Myriad.ECS.Entity.World"/> this <see cref="T:Myriad.ECS.Entity"/> is in
            </summary>
        </member>
        <member name="F:Myriad.ECS.Entity.ID">
            <summary>
            The raw ID of this <see cref="T:Myriad.ECS.Entity"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Entity.ComponentTypes">
            <summary>
            Get the set of components which this entity currently has
            </summary>
            <returns></returns>
        </member>
        <member name="P:Myriad.ECS.Entity.BoxedComponents">
            <summary>
            Get a boxed array of all components. <b>DO NOT</b> use this for anything other than debugging!
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.Exists">
            <summary>
            Check if this Entity still exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.IsAlive">
            <summary>
            Check if this Entity still exists and is not a phantom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.IsPhantom">
            <summary>
            Check if this Entity is in a phantom state. i.e. automatically excluded from queries
            and automatically deleted when the last IPhantomComponent component is removed.
            </summary>
            <returns>true if this entity is a phantom. False is it does not exist or is not a phantom.</returns>
        </member>
        <member name="M:Myriad.ECS.Entity.CompareTo(Myriad.ECS.Entity)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Entity.UniqueID">
            <summary>
            Get a unique 64 bit ID for this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.HasComponent``1">
            <summary>
            Check if this entity has a component
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``1">
            <summary>
            Get a reference to a component of the given type. If the entity
            does not have this component an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRefT``1">
            <summary>
            Get a reference to a component of the given type. If the entity
            does not have this component an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.GetBoxedComponent(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Get a <b>boxed copy</b> of a component from this entity. Only use for debugging!
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``2">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``3">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``4">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``5">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``6">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``7">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``8">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``9">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``10">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``11">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``12">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``13">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``14">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``15">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.Entity.GetComponentRef``16">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="T:Myriad.ECS.EntityId">
            <summary>
            The ID of an <see cref="T:Myriad.ECS.Entity"/> (not carrying a reference to a <see cref="T:Myriad.ECS.Worlds.World"/>)
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``2(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``3(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``4(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``5(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``6(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``7(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``8(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``9(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``10(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``11(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``12(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``13(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``14(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``15(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``16(Myriad.ECS.Worlds.World)">
            <summary>
            Get a tuple of several components
            </summary>
        </member>
        <member name="F:Myriad.ECS.EntityId.ID">
            <summary>
            The <see cref="T:Myriad.ECS.Entity"/> of an entity, may be re-used very quickly once an <see cref="T:Myriad.ECS.Entity"/> is destroyed.
            </summary>
        </member>
        <member name="F:Myriad.ECS.EntityId.Version">
            <summary>
            The version number of this ID, may also be re-used but only after the full 32 bit counter has been overflowed for this specific ID.
            </summary>
        </member>
        <member name="M:Myriad.ECS.EntityId.ToEntity(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Entity"/> struct that represents this Entity
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.Exists(Myriad.ECS.Worlds.World)">
            <summary>
            Check if this Entity still exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.IsAlive(Myriad.ECS.Worlds.World)">
            <summary>
            Check if this Entity still exists and is not a phantom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.IsPhantom(Myriad.ECS.Worlds.World)">
            <summary>
            Check if this Entity is in a phantom state. i.e. automatically excluded from queries
            and automatically deleted when the last IPhantomComponent component is removed.
            </summary>
            <returns>true if this entity is a phantom. False is it does not exist or is not a phantom.</returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.CompareTo(Myriad.ECS.EntityId)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.EntityId.UniqueID">
            <summary>
            Get a unique 64 bit ID for this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponents(Myriad.ECS.Worlds.World)">
            <summary>
            Get the set of components which this entity currently has
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.HasComponent``1(Myriad.ECS.Worlds.World)">
            <summary>
            Check if this entity has a component
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRef``1(Myriad.ECS.Worlds.World)">
            <summary>
            Get a reference to a component of the given type. If the entity
            does not have this component an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetComponentRefT``1(Myriad.ECS.Worlds.World)">
            <summary>
            Get a reference to a component of the given type. If the entity
            does not have this component an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.EntityId.GetBoxedComponent(Myriad.ECS.Worlds.World,Myriad.ECS.IDs.ComponentID)">
            <summary>
            Get a <b>boxed copy</b> of a component from this entity. Only use for debugging!
            </summary>
            <param name="world"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Extensions.SortedListExtensions.Enumerable``2(System.Collections.Generic.SortedList{``0,``1})">
            <summary>
            Get an enumerable struct wrapper around a SortedList
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.IComponent">
            <summary>
            Marker interface for components
            </summary>
        </member>
        <member name="T:Myriad.ECS.IDs.ComponentID">
            <summary>
            Unique numeric ID for a type which implements IComponent
            </summary>
        </member>
        <member name="P:Myriad.ECS.IDs.ComponentID.Value">
            <summary>
            Get the raw value of this ID
            </summary>
        </member>
        <member name="P:Myriad.ECS.IDs.ComponentID.Type">
            <summary>
            The <see cref="T:System.Type"/> of the component this ID is for
            </summary>
        </member>
        <member name="P:Myriad.ECS.IDs.ComponentID.IsPhantomComponent">
            <summary>
            Indicates if this component implements <see cref="T:Myriad.ECS.Components.IPhantomComponent"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.IDs.ComponentID.IsRelationComponent">
            <summary>
            Indicates if this component implements <see cref="T:Myriad.ECS.Components.IEntityRelationComponent"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.IDs.ComponentID.IsDisposableComponent">
            <summary>
            Indicates if this component implements <see cref="T:Myriad.ECS.Components.IDisposableComponent"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentID.CompareTo(Myriad.ECS.IDs.ComponentID)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentID.ToString">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentID.Get(System.Type)">
            <summary>
            Get the component ID for the given type
            </summary>
            <param name="type"></param>
            <exception cref="T:System.ArgumentException">Thrown if 'type' does not implement <see cref="T:Myriad.ECS.IComponent"/></exception>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.IDs.ComponentID`1">
            <summary>
            Retrieve the component ID for a type
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="F:Myriad.ECS.IDs.ComponentID`1.ID">
            <summary>
            The ID for <typeparamref name="TComponent" />
            </summary>
        </member>
        <member name="T:Myriad.ECS.IDs.ComponentRegistry">
            <summary>
            Store a lookup from component type to unique 32 bit ID.
            </summary>
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentRegistry.Get``1">
            <summary>
            Get the ID for the given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentRegistry.Get(System.Type)">
            <summary>
            Get the ID for the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.IDs.ComponentRegistry.Get(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Get the type for a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Worlds.World">
            <summary>
            A world contains all entities.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``1">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``2">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``3">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``4">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``5">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``6">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``7">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``8">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``9">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``10">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``11">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``12">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``13">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``14">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``15">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetCachedQuery``16">
            <summary>
            Get a query that finds entities which include all of the given types. This query
            will be shared with other requests for the same set of types.
            </summary>
            <returns>A query that finds entities which include all of the given types</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``2(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``3(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``4(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``5(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``6(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``7(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``8(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``9(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``10(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``11(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``12(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``13(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``14(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``15(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``16(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a default
            query object will be used (based on type parameters).</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``17(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">Type of component 0 to retrieve</typeparam>
            <typeparam name="T1">Type of component 1 to retrieve</typeparam>
            <typeparam name="T2">Type of component 2 to retrieve</typeparam>
            <typeparam name="T3">Type of component 3 to retrieve</typeparam>
            <typeparam name="T4">Type of component 4 to retrieve</typeparam>
            <typeparam name="T5">Type of component 5 to retrieve</typeparam>
            <typeparam name="T6">Type of component 6 to retrieve</typeparam>
            <typeparam name="T7">Type of component 7 to retrieve</typeparam>
            <typeparam name="T8">Type of component 8 to retrieve</typeparam>
            <typeparam name="T9">Type of component 9 to retrieve</typeparam>
            <typeparam name="T10">Type of component 10 to retrieve</typeparam>
            <typeparam name="T11">Type of component 11 to retrieve</typeparam>
            <typeparam name="T12">Type of component 12 to retrieve</typeparam>
            <typeparam name="T13">Type of component 13 to retrieve</typeparam>
            <typeparam name="T14">Type of component 14 to retrieve</typeparam>
            <typeparam name="T15">Type of component 15 to retrieve</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over. If null a suitable
            query object will automatically be created and written into this field.</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``2(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``2(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``3(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``3(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``4(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``4(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``5(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``5(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``6(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``6(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``7(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``7(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``8(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``8(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``9(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``9(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``10(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``10(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``11(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``11(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``12(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``12(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``13(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``13(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``14(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``14(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``15(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``15(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``16(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``16(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="q">The instance to execute over every entity.</param>
            <param name="query"></param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity. A new TQ() instance is used.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <param name="q">The instance to execute over every entity.</param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(``0@,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``17(``0@,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, optionally filtering by a <see cref="T:Myriad.ECS.Queries.QueryDescription"/>.
            </summary>
            <typeparam name="TQ">The type of the query to execute for every entity.</typeparam>
            <typeparam name="T0">Component 0 to include in query</typeparam>
            <typeparam name="T1">Component 1 to include in query</typeparam>
            <typeparam name="T2">Component 2 to include in query</typeparam>
            <typeparam name="T3">Component 3 to include in query</typeparam>
            <typeparam name="T4">Component 4 to include in query</typeparam>
            <typeparam name="T5">Component 5 to include in query</typeparam>
            <typeparam name="T6">Component 6 to include in query</typeparam>
            <typeparam name="T7">Component 7 to include in query</typeparam>
            <typeparam name="T8">Component 8 to include in query</typeparam>
            <typeparam name="T9">Component 9 to include in query</typeparam>
            <typeparam name="T10">Component 10 to include in query</typeparam>
            <typeparam name="T11">Component 11 to include in query</typeparam>
            <typeparam name="T12">Component 12 to include in query</typeparam>
            <typeparam name="T13">Component 13 to include in query</typeparam>
            <typeparam name="T14">Component 14 to include in query</typeparam>
            <typeparam name="T15">Component 15 to include in query</typeparam>
            <param name="q">
            The instance to execute over every entity. Passed by ref, so changes to the query
            struct will be persistent. This can allow values from one entity to be accessed by
            the next entity, or after the entire Execute call is complete.
            </param>
            <param name="query">
            Optional query to filter by. If non-null this <b>must</b> Include all of the component
            types specified in the type signature of this call!
            <br /><br />
            If null a default query will be used, selecting all entities which include the components
            in the type signature. This query object will be written to the query parameter by ref. It
            can be used next frame to slightly speed up query execution.
            </param>
            <returns>The number of entities discovered by this query</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteParallel``17(``0,Myriad.ECS.Queries.QueryDescription,System.Int32)">
            <summary>
            Execute a query in parallel over entities, blocks until complete.
            </summary>
            <param name="q"></param>
            <param name="query"></param>
            <param name="batchSize"></param>
            <returns></returns>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Execute``1(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, selecting entities which match the given <see cref="T:Myriad.ECS.Queries.QueryDescription"/>
            </summary>
            <typeparam name="TQ"></typeparam>
            <param name="q"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteChunk``1(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query, selecting entities which match the given <see cref="T:Myriad.ECS.Queries.QueryDescription"/>
            </summary>
            <typeparam name="TQ"></typeparam>
            <param name="q"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``3(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``5(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``7(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``9(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``11(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``13(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``15(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``17(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``19(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``21(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``23(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``25(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T11">The type of the component 11</typeparam>
            <typeparam name="TV11">The type component 11 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``27(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T11">The type of the component 11</typeparam>
            <typeparam name="TV11">The type component 11 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T12">The type of the component 12</typeparam>
            <typeparam name="TV12">The type component 12 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``29(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T11">The type of the component 11</typeparam>
            <typeparam name="TV11">The type component 11 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T12">The type of the component 12</typeparam>
            <typeparam name="TV12">The type component 12 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T13">The type of the component 13</typeparam>
            <typeparam name="TV13">The type component 13 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``31(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T11">The type of the component 11</typeparam>
            <typeparam name="TV11">The type component 11 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T12">The type of the component 12</typeparam>
            <typeparam name="TV12">The type component 12 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T13">The type of the component 13</typeparam>
            <typeparam name="TV13">The type component 13 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T14">The type of the component 14</typeparam>
            <typeparam name="TV14">The type component 14 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteVectorChunk``33(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a query which executes on entire chunks.
            </summary>
            <typeparam name="TQ">The type of the query</typeparam>
            <typeparam name="T0">The type of the component 0</typeparam>
            <typeparam name="TV0">The type component 0 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T1">The type of the component 1</typeparam>
            <typeparam name="TV1">The type component 1 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T2">The type of the component 2</typeparam>
            <typeparam name="TV2">The type component 2 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T3">The type of the component 3</typeparam>
            <typeparam name="TV3">The type component 3 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T4">The type of the component 4</typeparam>
            <typeparam name="TV4">The type component 4 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T5">The type of the component 5</typeparam>
            <typeparam name="TV5">The type component 5 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T6">The type of the component 6</typeparam>
            <typeparam name="TV6">The type component 6 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T7">The type of the component 7</typeparam>
            <typeparam name="TV7">The type component 7 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T8">The type of the component 8</typeparam>
            <typeparam name="TV8">The type component 8 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T9">The type of the component 9</typeparam>
            <typeparam name="TV9">The type component 9 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T10">The type of the component 10</typeparam>
            <typeparam name="TV10">The type component 10 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T11">The type of the component 11</typeparam>
            <typeparam name="TV11">The type component 11 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T12">The type of the component 12</typeparam>
            <typeparam name="TV12">The type component 12 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T13">The type of the component 13</typeparam>
            <typeparam name="TV13">The type component 13 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T14">The type of the component 14</typeparam>
            <typeparam name="TV14">The type component 14 will be cast to in the SIMD vectors</typeparam>
            <typeparam name="T15">The type of the component 15</typeparam>
            <typeparam name="TV15">The type component 15 will be cast to in the SIMD vectors</typeparam>
            <param name="q">The TQ instance which will be executed for each chunk</param>
            <param name="query">A query expressing which entities to execute this query over</param>
            <returns>The total number of entities processed</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count">
            <summary>
            Count how many entities exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count(Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Count how many entities match this query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``1">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``1(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``2">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``2(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``3">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``3(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``4">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``4(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``5">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``5(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``6">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``6(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``7">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``7(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``8">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``8(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``9">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``9(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``10">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``10(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``11">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``11(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``12">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``12(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``13">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``13(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``14">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``14(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``15">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``15(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``16">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Count``16(Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Count how many entities exist which include all given components
            </summary>
            <param name="cache">If null, will be set the the query. If not null, will be used to determine the count.</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``1(Myriad.ECS.Queries.QueryDelegateEntity{``0},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``1(Myriad.ECS.Queries.QueryDelegateEntity{``0},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``1(Myriad.ECS.Queries.QueryDelegateEntity{``0},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``1(Myriad.ECS.Queries.QueryDelegate{``0},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``1(Myriad.ECS.Queries.QueryDelegate{``0},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``1(Myriad.ECS.Queries.QueryDelegate{``0},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``2(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``2(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``2(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(Myriad.ECS.Queries.QueryDelegate{``0,``1},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``2(Myriad.ECS.Queries.QueryDelegate{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``2(Myriad.ECS.Queries.QueryDelegate{``0,``1},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``3(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``3(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``3(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``3(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``3(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``4(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``4(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``4(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``4(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``4(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``5(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``5(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``5(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``5(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``5(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``6(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``6(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``6(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``6(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``6(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``7(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``7(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``7(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``7(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``7(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``8(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``8(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``8(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``8(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``8(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``9(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``9(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``9(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``9(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``9(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``10(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``10(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``10(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``10(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``10(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``11(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``11(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``11(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``11(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``11(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``12(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``12(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``12(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``12(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``12(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``13(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``13(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``13(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``13(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``13(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``14(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``14(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``14(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``14(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``14(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``15(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``15(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``15(Myriad.ECS.Queries.QueryDelegateEntity{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``15(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``15(Myriad.ECS.Queries.QueryDelegate{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``16(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``16(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``16(``0,Myriad.ECS.Queries.QueryDelegateEntityData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``16(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Query``16(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.QueryParallel``16(``0,Myriad.ECS.Queries.QueryDelegateData{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Execute a delegate for every entity in a query, in parallel. Passing an object through into every call.
            </summary>
            <param name="delegate"></param>
            <param name="query"></param>
            <param name="data">The object passed into every call</param>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``4(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``5(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``6(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``7(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``8(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``9(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``10(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``11(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``12(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``13(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``14(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``15(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <typeparam name="T11">Component 11 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``16(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <typeparam name="T11">Component 11 to pass into mapper</typeparam>
            <typeparam name="T12">Component 12 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``17(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <typeparam name="T11">Component 11 to pass into mapper</typeparam>
            <typeparam name="T12">Component 12 to pass into mapper</typeparam>
            <typeparam name="T13">Component 13 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``18(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <typeparam name="T11">Component 11 to pass into mapper</typeparam>
            <typeparam name="T12">Component 12 to pass into mapper</typeparam>
            <typeparam name="T13">Component 13 to pass into mapper</typeparam>
            <typeparam name="T14">Component 14 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.ExecuteMapReduce``19(``0@,``1@,``2,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Execute a query, mapping every result to a value and then reducing those values to one final output
            </summary>
            <typeparam name="TM">Type of mapper</typeparam>
            <typeparam name="TR">Type of reducer</typeparam>
            <typeparam name="TOutput">Type of value returned</typeparam>
            <typeparam name="T0">Component 0 to pass into mapper</typeparam>
            <typeparam name="T1">Component 1 to pass into mapper</typeparam>
            <typeparam name="T2">Component 2 to pass into mapper</typeparam>
            <typeparam name="T3">Component 3 to pass into mapper</typeparam>
            <typeparam name="T4">Component 4 to pass into mapper</typeparam>
            <typeparam name="T5">Component 5 to pass into mapper</typeparam>
            <typeparam name="T6">Component 6 to pass into mapper</typeparam>
            <typeparam name="T7">Component 7 to pass into mapper</typeparam>
            <typeparam name="T8">Component 8 to pass into mapper</typeparam>
            <typeparam name="T9">Component 9 to pass into mapper</typeparam>
            <typeparam name="T10">Component 10 to pass into mapper</typeparam>
            <typeparam name="T11">Component 11 to pass into mapper</typeparam>
            <typeparam name="T12">Component 12 to pass into mapper</typeparam>
            <typeparam name="T13">Component 13 to pass into mapper</typeparam>
            <typeparam name="T14">Component 14 to pass into mapper</typeparam>
            <typeparam name="T15">Component 15 to pass into mapper</typeparam>
            <param name="q">query, which produces a value per entity</param>
            <param name="r">Reducer, for combining values</param>
            <param name="initial">Initial value to start reducing from</param>
            <param name="query">Query to select matched entities</param>
            <returns>A value calculated by reducing all intermediate values</returns>
        </member>
        <member name="P:Myriad.ECS.Worlds.World.Archetypes">
            <summary>
            Get a list of all archetypes in this <see cref="T:Myriad.ECS.Worlds.World"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Overwrite``1(``0,Myriad.ECS.Queries.QueryDescription)">
            <summary>
            Overwrite the value of a specific component on every entity which matches the given query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.Overwrite``1(``0,Myriad.ECS.Queries.QueryDescription@)">
            <summary>
            Overwrite the value of a specific component on every entity which matches the given query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetVersion(System.Int32)">
            <summary>
            Get the current version for a given entity ID
            </summary>
            <param name="entityId"></param>
            <returns>The entity ID, or zero if the entity does not exist</returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.World.GetOrCreateArchetype(Myriad.ECS.Collections.OrderedListSet{Myriad.ECS.IDs.ComponentID},Myriad.ECS.Worlds.Archetypes.ArchetypeHash)">
            <summary>
            Find an archetype with the given set of components, using a precomputed archetype hash.
            </summary>
            <param name="components"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Worlds.Archetypes.Archetype">
            <summary>
            An archetype contains all entities which share exactly the same set of components.
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype.CHUNK_SIZE">
            <summary>
            Number of entities in a single chunk
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype.CHUNK_HOT_SPARES">
            <summary>
            How many empty chunks to keep as spares
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.World">
            <summary>
            The world which this archetype belongs to
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.Components">
            <summary>
            The components of entities in this archetype
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.Hash">
            <summary>
            The hash of all components IDs in this archetype
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype._componentIndexLookup">
            <summary>
            Map from component ID (index) to index in chunk
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype._chunks">
            <summary>
            All chunks in this archetype
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype._chunksWithSpace">
            <summary>
            A list of chunks which might have space to put an entity in
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype._spareChunks">
            <summary>
            A list of empty chunks that have been removed from this archetype
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Archetypes.Archetype._phantomDestination">
            <summary>
            The archetype that entities should be moved to when deleted. Only non-null if <code>HasPhantomComponents &amp; !IsPhantom</code>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.EntityCount">
            <summary>
            The total number of entities in this archetype
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.HasPhantomComponents">
            <summary>
            Indicates if any of the components in this Archetype implement <see cref="T:Myriad.ECS.Components.IPhantomComponent"/>;
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.IsPhantom">
            <summary>
            Indicates if any of the components in this Archetype is <see cref="T:Myriad.ECS.Components.Phantom"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.HasRelationComponents">
            <summary>
            Indicates if ant of the components in this Archetype im[lement <see cref="T:Myriad.ECS.Components.IEntityRelationComponent"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.HasDisposableComponents">
            <summary>
            Indicates if ant of the components in this Archetype im[lement <see cref="T:Myriad.ECS.Components.IDisposableComponent"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.Archetype.Clear(Myriad.ECS.Command.LazyCommandBuffer@)">
            <summary>
            Delete every Entity in this archetype
            </summary>
            <param name="lazy"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.Archetype.AddEntity(Myriad.ECS.EntityId,Myriad.ECS.Worlds.EntityInfo@)">
            <summary>
            Find a chunk with space and add the given entity to it.
            </summary>
            <param name="entity">Entity to add to a chunk</param>
            <param name="info">Info will be mutated to point to the new location</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.Archetype.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.Archetype.Entities">
            <summary>
            Get an enumerable of all entities in this <see cref="T:Myriad.ECS.Worlds.Archetypes.Archetype"/>, in an arbitrary order.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeComponentDisposal.DisposeRemoved(Myriad.ECS.Command.LazyCommandBuffer@,Myriad.ECS.Worlds.EntityInfo,Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID})">
            <summary>
            Dispose components which are not in the destination archetype
            </summary>
            <param name="buffer"></param>
            <param name="info"></param>
            <param name="to"></param>
        </member>
        <member name="T:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerable">
            <summary>
            Enumerable of all the entities in a single archetype
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerable.Archetype">
            <summary>
            The <see cref="P:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerable.Archetype"/> this enumerable is over
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerable.#ctor(Myriad.ECS.Worlds.Archetypes.Archetype)">
            <summary>
            Create a new enumerable for the given archetype
            </summary>
            <param name="archetype"></param>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerable.GetEnumerator">
            <summary>
            Get an enumerator from this enumerable
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerator">
            <summary>
            Enumerator over the entities in an archetype
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerator.Current">
            <summary>
            Get the current item from this enumerator
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerator.MoveNext">
            <summary>
            Move to the next item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeEntityEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Worlds.Archetypes.ArchetypeHash">
            <summary>
            An archetype hash is made by mixing all of the components in an archetype.
            Components can be "toggled" to update the hash to a new value for an archetype with/without those components.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Archetypes.ArchetypeHash.Toggle(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Toggle (add or remove) the given component
            </summary>
            <param name="component"></param>
        </member>
        <member name="P:Myriad.ECS.Worlds.Chunks.Chunk.Archetype">
            <summary>
            The archetype which contains this chunk
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.Chunks.Chunk._componentIdLookup">
            <summary>
            Map from index to component ID
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Chunks.Chunk.EntityCount">
            <summary>
            Get the number of entities currently in this chunk
            </summary>
        </member>
        <member name="P:Myriad.ECS.Worlds.Chunks.Chunk.Entities">
            <summary>
            Get all of the entities in this chunk
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.Chunks.Chunk.GetComponentArray``1(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Get the component array, providing the component ID if it is known.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Myriad.ECS.Worlds.EntityInfo.Version">
            <summary>
            The current version of this entity
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.EntityInfo.Chunk">
            <summary>
            The chunk in the archetype which contains this entity
            </summary>
        </member>
        <member name="F:Myriad.ECS.Worlds.EntityInfo.RowIndex">
            <summary>
            The row in the chunk which contains this entity
            </summary>
        </member>
        <member name="T:Myriad.ECS.Worlds.WorldBuilder">
            <summary>
            A builder to create a new <see cref="T:Myriad.ECS.Worlds.World"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype(System.Type[])">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithThreadPool(Myriad.ECS.Threading.IThreadPool)">
            <summary>
            Define the threadpool system used by this world
            </summary>
            <param name="pool"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.Build">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Worlds.World"/> using the configuration in this <see cref="T:Myriad.ECS.Worlds.WorldBuilder"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``1">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``2">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``3">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``4">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``5">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``6">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``7">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``8">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``9">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``10">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``11">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``12">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``13">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``14">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``15">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``16">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``17">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``18">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``19">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``20">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``21">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``22">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``23">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``24">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``25">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``26">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``27">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``28">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``29">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``30">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``31">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Worlds.WorldBuilder.WithArchetype``32">
            <summary>
            Declare a specific archetype that should be created ahead of time in this world. This
            can prevent expensive structural changes in the world later.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.ChunkHandle">
            <summary>
            Temporary handle to a specific chunk
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.ChunkHandle.Archetype">
            <summary>
            The archetype this chunk belongs to
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.ChunkHandle.EntityCount">
            <summary>
            Get the total number of entities in this chunk
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.ChunkHandle.Entities">
            <summary>
            Get the entities in this chunk
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.ChunkHandle.HasComponent``1">
            <summary>
            Test if this chunk contains a specific component
            </summary>
            <typeparam name="T">Component type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.ChunkHandle.HasComponent(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Test if this chunk contains a specific component
            </summary>
            <param name="id">Component type</param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.ChunkHandle.GetComponentSpan``1">
            <summary>
            Try to get the span of the given component type in this chunk
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`1">
            <summary>
            A query which accepts 1 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`2">
            <summary>
            A query which accepts 2 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`3">
            <summary>
            A query which accepts 3 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`4">
            <summary>
            A query which accepts 4 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`5">
            <summary>
            A query which accepts 5 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`6">
            <summary>
            A query which accepts 6 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`7">
            <summary>
            A query which accepts 7 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`8">
            <summary>
            A query which accepts 8 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`9">
            <summary>
            A query which accepts 9 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`10">
            <summary>
            A query which accepts 10 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`11">
            <summary>
            A query which accepts 11 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`12">
            <summary>
            A query which accepts 12 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`13">
            <summary>
            A query which accepts 13 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`14">
            <summary>
            A query which accepts 14 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`15">
            <summary>
            A query which accepts 15 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery`16">
            <summary>
            A query which accepts 16 components
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.IQuery">
            <summary>
            Interface for query handlers which operate over entities
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.IQuery.Execute(Myriad.ECS.Entity)">
            <summary>
            Execute this query handler for an entity
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Myriad.ECS.Queries.IChunkQuery">
            <summary>
            Interface for query handlers which operate over entire chunks of entities
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.IChunkQuery.Execute(Myriad.ECS.Queries.ChunkHandle,System.ReadOnlySpan{Myriad.ECS.Entity})">
            <summary>
            Execute this query handler for a chunk of entities
            </summary>
            <param name="chunk"></param>
            <param name="e"></param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`1.Execute(System.Span{System.Numerics.Vector{`0}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`2.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`3.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`4.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`5.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`6.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`7.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`8.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`9.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`10.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`11.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`12.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Span{System.Numerics.Vector{`11}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
            <param name="t11">Span of vectors of values, reinterpreted from component 11</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`13.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Span{System.Numerics.Vector{`11}},System.Span{System.Numerics.Vector{`12}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
            <param name="t11">Span of vectors of values, reinterpreted from component 11</param>
            <param name="t12">Span of vectors of values, reinterpreted from component 12</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`14.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Span{System.Numerics.Vector{`11}},System.Span{System.Numerics.Vector{`12}},System.Span{System.Numerics.Vector{`13}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
            <param name="t11">Span of vectors of values, reinterpreted from component 11</param>
            <param name="t12">Span of vectors of values, reinterpreted from component 12</param>
            <param name="t13">Span of vectors of values, reinterpreted from component 13</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`15.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Span{System.Numerics.Vector{`11}},System.Span{System.Numerics.Vector{`12}},System.Span{System.Numerics.Vector{`13}},System.Span{System.Numerics.Vector{`14}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
            <param name="t11">Span of vectors of values, reinterpreted from component 11</param>
            <param name="t12">Span of vectors of values, reinterpreted from component 12</param>
            <param name="t13">Span of vectors of values, reinterpreted from component 13</param>
            <param name="t14">Span of vectors of values, reinterpreted from component 14</param>
        </member>
        <member name="M:Myriad.ECS.Queries.IVectorChunkQuery`16.Execute(System.Span{System.Numerics.Vector{`0}},System.Span{System.Numerics.Vector{`1}},System.Span{System.Numerics.Vector{`2}},System.Span{System.Numerics.Vector{`3}},System.Span{System.Numerics.Vector{`4}},System.Span{System.Numerics.Vector{`5}},System.Span{System.Numerics.Vector{`6}},System.Span{System.Numerics.Vector{`7}},System.Span{System.Numerics.Vector{`8}},System.Span{System.Numerics.Vector{`9}},System.Span{System.Numerics.Vector{`10}},System.Span{System.Numerics.Vector{`11}},System.Span{System.Numerics.Vector{`12}},System.Span{System.Numerics.Vector{`13}},System.Span{System.Numerics.Vector{`14}},System.Span{System.Numerics.Vector{`15}},System.Int32,System.Int32)">
            <summary>
            Execute work over SIMD vectors
            </summary>
            <param name="offset">How many far through a component does the first vector start. For example
            if the component is a vector3 then a value of 2 would indicate that Z is the first element.</param>
            <param name="padding">How many items at the end of the last vector in the span are padding items</param>
            <param name="t0">Span of vectors of values, reinterpreted from component 0</param>
            <param name="t1">Span of vectors of values, reinterpreted from component 1</param>
            <param name="t2">Span of vectors of values, reinterpreted from component 2</param>
            <param name="t3">Span of vectors of values, reinterpreted from component 3</param>
            <param name="t4">Span of vectors of values, reinterpreted from component 4</param>
            <param name="t5">Span of vectors of values, reinterpreted from component 5</param>
            <param name="t6">Span of vectors of values, reinterpreted from component 6</param>
            <param name="t7">Span of vectors of values, reinterpreted from component 7</param>
            <param name="t8">Span of vectors of values, reinterpreted from component 8</param>
            <param name="t9">Span of vectors of values, reinterpreted from component 9</param>
            <param name="t10">Span of vectors of values, reinterpreted from component 10</param>
            <param name="t11">Span of vectors of values, reinterpreted from component 11</param>
            <param name="t12">Span of vectors of values, reinterpreted from component 12</param>
            <param name="t13">Span of vectors of values, reinterpreted from component 13</param>
            <param name="t14">Span of vectors of values, reinterpreted from component 14</param>
            <param name="t15">Span of vectors of values, reinterpreted from component 15</param>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryBuilder">
            <summary>
            Build a new <see cref="T:Myriad.ECS.Queries.QueryDescription"/> object
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryBuilder.Included">
            <summary>
            An Entity must include all of these components to be matched by this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryBuilder.Excluded">
            <summary>
            Entities with these components will not be matched by this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryBuilder.AtLeastOnes">
            <summary>
            At least one of all these components must be on an Entity for it to be matched by this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryBuilder.ExactlyOnes">
            <summary>
            Exactly one of all these components must be on an Entity for it to be matched by this query
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.#ctor">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Queries.QueryBuilder"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Build(Myriad.ECS.Worlds.World)">
            <summary>
            Build a <see cref="T:Myriad.ECS.Queries.QueryDescription"/> from the current state of this builder
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``1">
            <summary>
            The given component must exist for an entity to be matched by this query
            </summary>
            <typeparam name="T">The component type</typeparam>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include(System.Type)">
            <summary>
            The given component must exist for an entity to be matched by this query
            </summary>
            <param name="type">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include(Myriad.ECS.IDs.ComponentID)">
            <summary>
            The given component must exist for an entity to be matched by this query
            </summary>
            <param name="id">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsIncluded(System.Type)">
            <summary>
            Check if the given component type has been marked as "Include"
            </summary>
            <param name="type">The component type</param>
            <returns>true, if the component is included, otherwise false</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsIncluded``1">
            <summary>
            Check if the given component type has been marked as "Include"
            </summary>
            <typeparam name="T">The component type</typeparam>
            <returns>true, if the component is included, otherwise false</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsIncluded(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Check if the given component type has been marked as "Include"
            </summary>
            <param name="id">The component id</param>
            <returns>true, if the component is included, otherwise false</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``1">
            <summary>
            The given component must not exist for an entity to be matched by this query
            </summary>
            <typeparam name="T">The component type</typeparam>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude(System.Type)">
            <summary>
            The given component must not exist for an entity to be matched by this query
            </summary>
            <param name="type">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude(Myriad.ECS.IDs.ComponentID)">
            <summary>
            The given component must not exist for an entity to be matched by this query
            </summary>
            <param name="id">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExcluded(System.Type)">
            <summary>
            Check if the given component is excluded
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExcluded``1">
            <summary>
            Check if the given component is excluded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExcluded(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Check if the given component is excluded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.AtLeastOneOf``1">
            <summary>
            At least one of all components specified as AtLeastOneOf must exist for an entity to be matched by this query
            </summary>
            <typeparam name="T">The component type</typeparam>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.AtLeastOneOf(System.Type)">
            <summary>
            At least one of all components specified as AtLeastOneOf must exist for an entity to be matched by this query
            </summary>
            <param name="type">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.AtLeastOneOf(Myriad.ECS.IDs.ComponentID)">
            <summary>
            At least one of all components specified as AtLeastOneOf must exist for an entity to be matched by this query
            </summary>
            <param name="id">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsAtLeastOneOf(System.Type)">
            <summary>
            Check if the given component is one of the components which entities must have at least one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsAtLeastOneOf``1">
            <summary>
            Check if the given component is one of the components which entities must have at least one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsAtLeastOneOf(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Check if the given component is one of the components which entities must have at least one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.ExactlyOneOf``1">
            <summary>
            Exactly one of all components specified as ExactlyOneOf must exist for an entity to be matched by this query
            </summary>
            <typeparam name="T">The component type</typeparam>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.ExactlyOneOf(System.Type)">
            <summary>
            Exactly one of all components specified as ExactlyOneOf must exist for an entity to be matched by this query
            </summary>
            <param name="type">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.ExactlyOneOf(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Exactly one of all components specified as ExactlyOneOf must exist for an entity to be matched by this query
            </summary>
            <param name="id">The component type</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExactlyOneOf(System.Type)">
            <summary>
            Check if the given component is one of the components which entities must have exactly one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExactlyOneOf``1">
            <summary>
            Check if the given component is one of the components which entities must have exactly one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.IsExactlyOneOf(Myriad.ECS.IDs.ComponentID)">
            <summary>
            Check if the given component is one of the components which entities must have exactly one of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``2">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``3">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``4">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``5">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``6">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``7">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``8">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``9">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``10">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``11">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``12">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``13">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``14">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``15">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Include``16">
            <summary>
            Include only entities which have all of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``2">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``3">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``4">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``5">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``6">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``7">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``8">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``9">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``10">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``11">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``12">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``13">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``14">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``15">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryBuilder.Exclude``16">
            <summary>
            Exclude entities which have any of these components
            </summary>
            <returns>The query builder</returns>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`1">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`1">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`2">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`2">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`2">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`2">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`3">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`3">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`3">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`3">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`4">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`4">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`4">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`4">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`5">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`5">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`5">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`5">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`6">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`6">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`6">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`6">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`7">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`7">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`7">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`7">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`8">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`8">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`8">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`8">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`9">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`9">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`9">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`9">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`10">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`10">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`10">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`10">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`11">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`11">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`11">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`11">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`12">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`12">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`12">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`12">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`13">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`13">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`13">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`13">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`14">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`14">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`14">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`14">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`15">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`15">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegate`15">
            <summary>
            A delegate called for entities in a query. Receives just the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntity`15">
            <summary>
            A delegate called for entities in a query. Receives the entity and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateData`16">
            <summary>
            A delegate called for entities in a query. Receives a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDelegateEntityData`16">
            <summary>
            A delegate called for entities in a query. Receives the entity, a data object passed into the query and the components requested.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDescription">
            <summary>
            Describes a query for entities, bound to a world.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.World">
            <summary>
            The World that this query is for
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.Include">
            <summary>
            The components which must be present on an entity for it to match this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.Exclude">
            <summary>
            The components which must not be present on an entity for it to match this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.AtLeastOneOf">
            <summary>
            At least one of these components must be present on an entity for it to match this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.ExactlyOneOf">
            <summary>
            Exactly one of these components must be present on an entity for it to match this query
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.#ctor(Myriad.ECS.Worlds.World,Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID},Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID},Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID},Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID})">
            <summary>
            Describes a query for entities, bound to a world.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.ToBuilder">
            <summary>
            Create a query builder which describes this query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.GetArchetypes">
            <summary>
            Get all archetypes which match this query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.MatchResult.Archetypes">
            <summary>
            The archetypes matching this query
            </summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.MatchResult.ArchetypeWatermark">
            <summary>
            The number of archetypes in the world when this cache was created
            </summary>
        </member>
        <member name="T:Myriad.ECS.Queries.QueryDescription.ArchetypeMatch">
            <summary>
            An archetype which matches a query
            </summary>
            <param name="Archetype">The archetype</param>
            <param name="AtLeastOne">All of the "at least one" components present (if there are any in this query)</param>
            <param name="ExactlyOne">The "exactly one" component present (if there is one in this query)</param>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.ArchetypeMatch.#ctor(Myriad.ECS.Worlds.Archetypes.Archetype,Myriad.ECS.Collections.FrozenOrderedListSet{Myriad.ECS.IDs.ComponentID},System.Nullable{Myriad.ECS.IDs.ComponentID})">
            <summary>
            An archetype which matches a query
            </summary>
            <param name="Archetype">The archetype</param>
            <param name="AtLeastOne">All of the "at least one" components present (if there are any in this query)</param>
            <param name="ExactlyOne">The "exactly one" component present (if there is one in this query)</param>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.ArchetypeMatch.Archetype">
            <summary>The archetype</summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.ArchetypeMatch.AtLeastOne">
            <summary>All of the "at least one" components present (if there are any in this query)</summary>
        </member>
        <member name="P:Myriad.ECS.Queries.QueryDescription.ArchetypeMatch.ExactlyOne">
            <summary>The "exactly one" component present (if there is one in this query)</summary>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.Count">
            <summary>
            Count how many entities match this query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.Any">
            <summary>
            Check if this query matches any entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.FirstOrDefault">
            <summary>
            Get the first entity which this query matches (or null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Queries.QueryDescription.Overwrite``1(``0)">
            <summary>
            Overwrite a component for every entity which matches this query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns>The number of entities written to</returns>
        </member>
        <member name="T:Myriad.ECS.Systems.CommandBufferSystem`1">
            <summary>
            Executes a command buffer in Update.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.CommandBufferSystem`1.Resolver">
            <summary>
            Get the resolver from the previous playback.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.CommandBufferSystem`1.Buffer">
            <summary>
            The CommandBuffer which will be executed in the next Update tick.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.CommandBufferSystem`1.World">
            <summary>
            The world this system is bound to
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.CommandBufferSystem`1.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.CommandBufferSystem`1"/>
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.CommandBufferSystem`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.EarlyCommandBufferSystem`1">
            <summary>
            Executes a command buffer in BeforeUpdate.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.Resolver">
            <summary>
            Get the resolver from the previous playback.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.Buffer">
            <summary>
            The CommandBuffer which will be executed in the next Update tick.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.World">
            <summary>
            The world this system is bound to
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.EarlyCommandBufferSystem`1"/>
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.BeforeUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.EarlyCommandBufferSystem`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.LateCommandBufferSystem`1">
            <summary>
            Executes a command buffer in AfterUpdate.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.LateCommandBufferSystem`1.Resolver">
            <summary>
            Get the <see cref="T:Myriad.ECS.Command.CommandBuffer.Resolver"/> from the previous playback.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.LateCommandBufferSystem`1.Buffer">
            <summary>
            The <see cref="T:Myriad.ECS.Command.CommandBuffer"/> which will be executed in the next Update tick.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.LateCommandBufferSystem`1.World">
            <summary>
            The <see cref="P:Myriad.ECS.Systems.LateCommandBufferSystem`1.World"/> this system is bound to
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.LateCommandBufferSystem`1.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.LateCommandBufferSystem`1"/>
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.LateCommandBufferSystem`1.Update(`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.LateCommandBufferSystem`1.AfterUpdate(`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.ISystem`1">
            <summary>
            Base interface for all systems
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystem`1.Update(`0)">
            <summary>
            Called one per tick
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.ISystemInit`1">
            <summary>
            Add one time setup to a system
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystemInit`1.Init">
            <summary>
            Called once when a system is first created
            </summary>
        </member>
        <member name="T:Myriad.ECS.Systems.ISystemBefore`1">
            <summary>
            Updates this system just before the normal Update phase
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystemBefore`1.BeforeUpdate(`0)">
            <summary>
            Called one per tick, before the normal Update call
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.ISystemAfter`1">
            <summary>
            Updates this system just after the normal Update phase
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystemAfter`1.AfterUpdate(`0)">
            <summary>
            Called one per tick, after the normal Update call
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.ISystemDeclare`1">
            <summary>
            A system which declares which components is access in the update phase
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystemDeclare`1.Declare(Myriad.ECS.Systems.SystemDeclaration@)">
            <summary>
            Declare which components this system accesses during the update phase
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.SystemDeclaration">
            <summary>
            A declaration of what components a system accesses during update
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemDeclaration.Read``1">
            <summary>
            Declare that the given component is read during the update phase
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemDeclaration.Write``1">
            <summary>
            Declare that the given component is written during the update phase
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Myriad.ECS.Systems.DeclareSystemGroup`1">
            <summary>
            A system group which runs systems serially, but requires that they are declarative systems. The group itself is
            a declarative system, which is the union of all declarations.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.DeclareSystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystemDeclare{`0}[])">
            <summary>
            A system group which runs systems serially, but requires that they are declarative systems. The group itself is
            a declarative system, which is the union of all declarations.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.DeclareSystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DeclareSystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DeclareSystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DeclareSystemGroup`1.Declare(Myriad.ECS.Systems.SystemDeclaration@)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.PhasedParallelSystemGroup`1">
            <summary>
            Run systems in parallel where possible, based on declarations of what components they access. Systems will be
            run in no particular order, the only guarantee is systems will not run in parallel if they read/write or
            write/write the same component(s).
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.PhasedParallelSystemGroup`1.Phases">
            <summary>
            Get the number of "phases" which were generated last frame. Each phase runs a number of systems in parallel, but the
            phases themselves are run sequentially. Less phases means more parallelism.
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.PhasedParallelSystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystemDeclare{`0}[])">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.PhasedParallelSystemGroup`1"/>
            </summary>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.PhasedParallelSystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.PhasedParallelSystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.PhasedParallelSystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.OrderedParallelSystemGroup`1">
            <summary>
            Execute systems in order, with parallism. Systems which reads a component waits for earlier systems which write
            that component. Systems which write a component wait for earlier systems which write or read a component.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.OrderedParallelSystemGroup`1.MaxDependencyChain">
            <summary>
            Get the length of the longest dependency chain
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.OrderedParallelSystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystemDeclare{`0}[])">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.OrderedParallelSystemGroup`1"/>
            </summary>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.OrderedParallelSystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.OrderedParallelSystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.OrderedParallelSystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.ISystemGroup`1">
            <summary>
            A group of systems that will be executed together. A group is itself a system, so groups can be nested.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.ISystemGroup`1.Name">
            <summary>
            A unique identifier for this system group
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.ISystemGroup`1.TotalExecutionTime">
            <summary>
            Total time spent executing all update calls in the last frame
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.ISystemGroup`1.Systems">
            <summary>
            Get all systems in this group
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.ISystemGroup`1.RecursiveSystems">
            <summary>
            Get all systems in this group, expanding out all system groups into contained systems
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.ISystemGroup`1.TryGet``1">
            <summary>
            Get a system of the given type
            </summary>
            <typeparam name="TSys"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Systems.SystemGroupItem`1">
            <summary>
            A single item in a <see cref="T:Myriad.ECS.Systems.SystemGroup`1"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.Enabled">
            <summary>
            Indicates if update calls will be made to this system.
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.System">
            <summary>
            Get the system that this item represents
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.Type">
            <summary>
            Type of <see cref="P:Myriad.ECS.Systems.SystemGroupItem`1.System"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.HasBeforeUpdate">
            <summary>
            Indicates if this system has a BeforeUpdate phase
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.BeforeUpdateTime">
            <summary>
            Time elapsed in last BeforeUpdate phase
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.UpdateTime">
            <summary>
            Time elapsed in last Update phase
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.HasAfterUpdate">
            <summary>
            Indicates if this system has a AfterUpdate phase
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemGroupItem`1.AfterUpdateTime">
            <summary>
            Time elapsed in last AfterUpdate phase
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemGroupItem`1.#ctor(Myriad.ECS.Systems.ISystem{`0})">
            <summary>
            Create a new <see cref="T:Myriad.ECS.Systems.SystemGroupItem`1"/> wrapping the given system
            </summary>
            <param name="system"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.BaseSystemGroup`1">
            <summary>
            Base class for a group of systems executed together
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.BaseSystemGroup`1.Name">
            <summary>
            The name of this group
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.BaseSystemGroup`1.TotalExecutionTime">
            <summary>
            Total time consumed in this system in the previous update call
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystem{`0}[])">
            <summary>
            Create a new system group
            </summary>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.Init">
            <summary>
            Call Init on all systems in this group which implement <see cref="T:Myriad.ECS.Systems.ISystemInit`1"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.Add(Myriad.ECS.Systems.ISystem{`0})">
            <summary>
            Add a new system to the end of this group
            </summary>
            <param name="system"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.Remove(Myriad.ECS.Systems.ISystem{`0})">
            <summary>
            Remove a system from this group
            </summary>
            <param name="system"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.BeforeUpdate(`0)">
            <summary>
            Call BeforeUpdate on all systems in this group
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <summary>
            Called by BeforeUpdate, should implement the actual call to the systems
            </summary>
            <param name="systems"></param>
            <param name="data"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.Update(`0)">
            <summary>
            Call Update on all systems in this group
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <summary>
            Called by Update, should implement the actual call to the systems
            </summary>
            <param name="systems"></param>
            <param name="data"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.AfterUpdate(`0)">
            <summary>
            Call AfterUpdate on all systems in this group
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.BaseSystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <summary>
            Called by AfterUpdate, should implement the actual call to the systems
            </summary>
            <param name="systems"></param>
            <param name="data"></param>
        </member>
        <member name="P:Myriad.ECS.Systems.BaseSystemGroup`1.Systems">
            <summary>
            All the systems in this group
            </summary>
        </member>
        <member name="P:Myriad.ECS.Systems.BaseSystemGroup`1.RecursiveSystems">
            <summary>
            All the systems in this group, if any of the systems are a group they are expanded to their inner
            systems recursively.
            </summary>
        </member>
        <member name="T:Myriad.ECS.Systems.SystemGroup`1">
            <summary>
            Execute all systems in order
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystem{`0}[])">
            <summary>
            Execute all systems in order
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.SystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.SystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Systems.DynamicSystemGroup`1">
            <summary>
            Execute all systems in order, allows adding new systems to the group
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.#ctor(System.String,Myriad.ECS.Systems.ISystem{`0}[])">
            <summary>
            Execute all systems in order, allows adding new systems to the group
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="systems"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.BeforeUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.UpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.AfterUpdateInternal(System.Collections.Generic.List{Myriad.ECS.Systems.SystemGroupItem{`0}},`0)">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.Add(Myriad.ECS.Systems.ISystem{`0})">
            <summary>
            Add a new system to the end of this group
            </summary>
            <param name="system"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Systems.DynamicSystemGroup`1.Remove(Myriad.ECS.Systems.ISystem{`0})">
            <summary>
            Remove a system from this group
            </summary>
            <param name="system"></param>
            <returns></returns>
        </member>
        <member name="T:Myriad.ECS.Systems.SystemState`2">
            <summary>
            Automatically attaches <typeparamref name="TAssociated"/> component to any entity which has <typeparamref name="TComponent"/>. Automatically removes
            <typeparamref name="TAssociated"/> component from any entity which has <typeparamref name="TAssociated"/> and does not have <typeparamref name="TComponent"/>.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TAssociated"></typeparam>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemState`2.#ctor(Myriad.ECS.Worlds.World)">
            <summary>
            Automatically attaches <typeparamref name="TAssociated"/> component to any entity which has <typeparamref name="TComponent"/>. Automatically removes
            <typeparamref name="TAssociated"/> component from any entity which has <typeparamref name="TAssociated"/> and does not have <typeparamref name="TComponent"/>.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TAssociated"></typeparam>
        </member>
        <member name="P:Myriad.ECS.Systems.SystemState`2.AssociatedIsPhantom">
            <summary>
            Indicates if <typeparamref name="TAssociated"/> is an <see cref="T:Myriad.ECS.Components.IPhantomComponent"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemState`2.Update(Myriad.ECS.Command.CommandBuffer)">
            <summary>
            Apply changes
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemState`2.Create(Myriad.ECS.Entity)">
            <summary>
            Create an instance of <typeparamref name="TAssociated" /> for the given entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemState`2.OnAttach(Myriad.ECS.Entity,Myriad.ECS.Command.CommandBuffer)">
             <summary>
             Called when an Entity is found that has <typeparamref name="TComponent"/> but does not have <typeparamref name="TAssociated"/>.
            
             Call base.OnAttach to attach default <typeparamref name="TAssociated"/>, or attach it yourself and do not call base.OnAttach.
             </summary>
             <param name="e"></param>
             <param name="c"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.SystemState`2.OnDetach(Myriad.ECS.Entity,Myriad.ECS.Command.CommandBuffer,`1@)">
            <summary>
            Called when an Entity is found that has <typeparamref name="TAssociated"/> but does not have <typeparamref name="TComponent"/>.
            
            Call base.OnDetach to detach <typeparamref name="TAssociated"/>.
            </summary>
            <param name="e"></param>
            <param name="c"></param>
            <param name="associated"></param>
        </member>
        <member name="T:Myriad.ECS.Systems.FactorySystemState`2">
            <summary>
            A <see cref="T:Myriad.ECS.Systems.SystemState`2"/> which creates the associated component with a factory function
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TAssociated"></typeparam>
            <param name="world"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.FactorySystemState`2.#ctor(Myriad.ECS.Worlds.World,System.Func{Myriad.ECS.Entity,`1})">
            <summary>
            A <see cref="T:Myriad.ECS.Systems.SystemState`2"/> which creates the associated component with a factory function
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TAssociated"></typeparam>
            <param name="world"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Myriad.ECS.Systems.FactorySystemState`2.Create(Myriad.ECS.Entity)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Threading.DefaultThreadPool">
            <summary>
            Use the dotnet <see cref="T:System.Threading.ThreadPool"/>
            </summary>
        </member>
        <member name="P:Myriad.ECS.Threading.DefaultThreadPool.Threads">
            <inheritdoc />
        </member>
        <member name="M:Myriad.ECS.Threading.DefaultThreadPool.QueueUserWorkItem(Myriad.ECS.Threading.IThreadPoolWork)">
            <inheritdoc />
        </member>
        <member name="T:Myriad.ECS.Threading.IThreadPool">
            <summary>
            A threadpool provides a way to queue work on other threads
            </summary>
        </member>
        <member name="P:Myriad.ECS.Threading.IThreadPool.Threads">
            <summary>
            Get how many workers threads should be scheduled
            </summary>
        </member>
        <member name="M:Myriad.ECS.Threading.IThreadPool.QueueUserWorkItem(Myriad.ECS.Threading.IThreadPoolWork)">
            <summary>
            Queue a delegate to be called on another thread
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Myriad.ECS.Threading.IThreadPoolWork">
            <summary>
            A item of work that can be added to an <see cref="T:Myriad.ECS.Threading.IThreadPool"/>
            </summary>
        </member>
        <member name="M:Myriad.ECS.Threading.IThreadPoolWork.Execute">
            <summary>
            Run this work.
            </summary>
        </member>
        <member name="M:Myriad.ECS.xxHash.xxHash64.ComputeHash(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Compute xxHash for the data byte span
            </summary>
            <param name="data">The source of data</param>
            <param name="seed">The seed number</param>
            <returns>hash</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
